// Copyright (c) 2014-2015 Dropbox, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef PYSTON_CODEGEN_BASELINEJIT_H
#define PYSTON_CODEGEN_BASELINEJIT_H

#include <llvm/ADT/ArrayRef.h>

#include "asm_writing/rewriter.h"
#include "codegen/ast_interpreter.h"
#include "gc/heap.h"
#include "runtime/ics.h"

namespace pyston {

#define ENABLE_BASELINEJIT_ICS 1

class AST_stmt;
class Box;
class BoxedDict;
class BoxedList;
class BoxedTuple;

class SetGlobalIC;
class GetGlobalIC;
class SetAttrIC;
class GetAttrIC;
class SetItemIC;
class GetItemIC;
class CompareIC;
class AugBinopIC;
class UnaryopIC;
class RuntimeCallIC;

class JitFragmentWriter;

// This JIT tier is designed as Pystons entry level JIT tier (executed after a only a few dozens runs of a basic block)
// which emits code very quick. It does not do any type specializations but can use inline caches.
// It operates on a basic block at a time (=CFGBLock*) and supports very fast switching between the
// interpreter and the JITed code on every block start/end.
//
// To archive this it's tightly integrated with the AST Interpreter and always operates on an ASTInterpreter instance.
// The process works like this:
//  - in the ASTInterpreter main loop we will check on every basic block start if we have already machine code for the
//  basic block
//  - if we have, we will directly call it (='entry_code' pointer inside the CFGBlock)
//  - if we don't have but determined that the block is hot (loop backedge threshold reached or function got called
//      often enough) and and we haven't yet tried to JIT it we will start with the JITing process:
//  - create/reuse a JitCodeBlock for the function
//  - create a new JitFragmentWriter for the basic block to JIT
//  - interpret the basic block and in addition call into corresponding emit* functions of the JitFragmentWriter on
//      every AST node encountered.
//  - if a node is encountered which is not supported, abort JITing of the block and blacklist this block
//  - if we reached the control flow changing node of the basic block (e.g. a branch, return or jump node) we finish
//     JITing the block.
//
// A JITed block is allowed to jump directly to another JITed basic block or if the block is not yet JITed (or we are
// unable to JIT it) we return from the function and the interpreter will immediatelly continue interpreting the next
// block.

// JitCodeBlock manages a fixed size memory block which stores JITed code.
// It can contain a variable number of blocks generated by JitFragmentWriter instances.
// Currently a JitFragment always contains the code of a single CFGBlock*.
// A JitFragment can get called from the Interpreter by calling 'entry_code' which will jump to the fragment start or
// it can get executed by a jump from another fragment.
// At every fragment end we can jump to another fragment, fallback to the Interpreter or exit.
// This means we are not allowed to assume that a register contains a specific value between JitFragments.
// This also means that we are allowed to store a Python variable which only lives in the current CFGBLock* inside a
// register or stack slot but we aren't if it outlives the block - we have to store it in the interpreter instance.
//
// To execute a specific CFGBlock one has to call:
//      CFGBlock* block;
//      block->entry_code(ast_interpreter_instance, block)
//
// Signature of a JitCodeBlock:
//  std::pair<CFGBlock*, Box*>(*entry_code)(ASTInterpreter* interp, CFGBlock* block)
//  args:
//      interp:  instance to the ASTInterpreter
//      block:   block to execute
//
//  return value:
//      first:   next block to execute in the interpreter
//                  if 0, we executed a return node and should return second
//      second:  return value only used if first == 0
//
// Basic layout of generated code block is:
// entry_code:
//      push   %rbp                 ; setup frame pointer
//      mov    %rsp,%rbp
//      sub    $0x108,%rsp          ; setup scratch, 0x108 = scratch_size + 8 (=stack alignment)
//      push   %rdi                 ; save the pointer to ASTInterpreter instance
//      jmpq   *0x8(%rsi)           ; jump to block->code
//                                      possible values: first_JitFragment, second_JitFragment,...
//
// first_JitFragment:
//      ...
//    ; Side exit (e.g. if <val> <block1> else <block2>
//      movabs $0x1270014108,%rcx   ; rcx = True
//      cmp    %rax,%rcx            ; rax == True
//      jne    end_side_exit
//      mov    %rax,0x10(%rsp)      ;
//      movabs $0x215bb60,%rax      ; rax = CFGBlock* to call next (rax is also the 1. return reg)
//      mov    0x8(%rax),%rsi       ; load CFGBlock->code
//      test   %rsi,%rsi            ; CFGBlock->code == 0
//      je     epilog               ; exit to interpreter if code == 0
//      jmpq   *0x8(%rax)           ; jump to new jit fragment (e.g second_JitFragment)
//    end_side_exit:
//      ....

// second_JitFragment:
//      ...
//
// nth_JitFragment:
//      ...                         ; direct jump previous JITed block
//      jmp first_JitFragment
//
// epilog:                          ; code which jumps to epilog has to make sure that
//                                  ; rax contains the next block to execute
//                                  ; or 0 if we are finished but then rdx must contain the Box* value to return
//      leave
//      ret
//
class JitCodeBlock {
private:
    static constexpr int scratch_size = 256;
    static constexpr int code_size = 4096 * 2;

    EHFrameManager frame_manager;
    std::unique_ptr<uint8_t[]> code;
    int entry_offset;
    int epilog_offset;
    assembler::Assembler a;
    bool is_currently_writing;
    bool asm_failed;

public:
    JitCodeBlock(llvm::StringRef name);

    std::unique_ptr<JitFragmentWriter> newFragment(CFGBlock* block, int patch_jump_offset = 0);
    bool shouldCreateNewBlock() const { return asm_failed || a.bytesLeft() < 128; }
    void fragmentAbort(bool not_enough_space);
    void fragmentFinished(int bytes_witten, int num_bytes_overlapping, void* next_fragment_start);
};

class JitFragmentWriter : public Rewriter {
private:
    static constexpr int jump_size = 5;

    CFGBlock* block;
    int code_offset;            // offset inside the JitCodeBlock to the start of this block
    int num_bytes_overlapping;  // num of bytes this block overlaps with the prev. used to patch unessary forward jumps
    int num_bytes_forward_jump; // number of bytes emited for the last forward jump to the next block. This is used to
                                // patch unessary forward jumps when the next fragment is emited (it becomes
                                // num_bytes_overlapping)
    void* entry_code;           // JitCodeBlock start address. Mmust have an offset of 0 into the code block
    JitCodeBlock& code_block;
    RewriterVar* interp;
    llvm::DenseMap<InternedString, RewriterVar*> local_syms;
    std::unique_ptr<ICInfo> ic_info;
    std::pair<CFGBlock*, int> patch_offset;

public:
    JitFragmentWriter(CFGBlock* block, std::unique_ptr<ICInfo> ic_info, std::unique_ptr<ICSlotRewrite> rewrite,
                      int code_offset, int num_bytes_overlapping, void* entry_code, JitCodeBlock& code_block);

    RewriterVar* imm(uint64_t val);
    RewriterVar* imm(void* val);


    RewriterVar* emitAugbinop(RewriterVar* lhs, RewriterVar* rhs, int op_type);
    RewriterVar* emitBinop(RewriterVar* lhs, RewriterVar* rhs, int op_type);
    RewriterVar* emitCallattr(RewriterVar* obj, BoxedString* attr, CallattrFlags flags,
                              const llvm::ArrayRef<RewriterVar*> args, std::vector<BoxedString*>* keyword_names);
    RewriterVar* emitCompare(RewriterVar* lhs, RewriterVar* rhs, int op_type);
    RewriterVar* emitCreateDict(const llvm::ArrayRef<RewriterVar*> keys, const llvm::ArrayRef<RewriterVar*> values);
    RewriterVar* emitCreateList(const llvm::ArrayRef<RewriterVar*> values);
    RewriterVar* emitCreateSet(const llvm::ArrayRef<RewriterVar*> values);
    RewriterVar* emitCreateSlice(RewriterVar* start, RewriterVar* stop, RewriterVar* step);
    RewriterVar* emitCreateTuple(const llvm::ArrayRef<RewriterVar*> values);
    RewriterVar* emitDeref(InternedString s);
    RewriterVar* emitExceptionMatches(RewriterVar* v, RewriterVar* cls);
    RewriterVar* emitGetAttr(RewriterVar* obj, BoxedString* s);
    RewriterVar* emitGetBlockLocal(InternedString s);
    RewriterVar* emitGetBoxedLocal(BoxedString* s);
    RewriterVar* emitGetBoxedLocals();
    RewriterVar* emitGetClsAttr(RewriterVar* obj, BoxedString* s);
    RewriterVar* emitGetGlobal(Box* global, BoxedString* s);
    RewriterVar* emitGetItem(RewriterVar* value, RewriterVar* slice);
    RewriterVar* emitGetLocal(InternedString s);
    RewriterVar* emitGetPystonIter(RewriterVar* v);
    RewriterVar* emitHasnext(RewriterVar* v);
    RewriterVar* emitLandingpad();
    RewriterVar* emitNonzero(RewriterVar* v);
    RewriterVar* emitNotNonzero(RewriterVar* v);
    RewriterVar* emitRepr(RewriterVar* v);
    RewriterVar* emitRuntimeCall(RewriterVar* obj, ArgPassSpec argspec, const llvm::ArrayRef<RewriterVar*> args,
                                 std::vector<BoxedString*>* keyword_names);
    RewriterVar* emitUnaryop(RewriterVar* v, int op_type);
    RewriterVar* emitUnpackIntoArray(RewriterVar* v, uint64_t num);
    RewriterVar* emitYield(RewriterVar* v);

    void emitExec(RewriterVar* code, RewriterVar* globals, RewriterVar* locals, FutureFlags flags);
    void emitJump(CFGBlock* b);
    void emitOSRPoint(AST_Jump* node);
    void emitPrint(RewriterVar* dest, RewriterVar* var, bool nl);
    void emitRaise0();
    void emitRaise3(RewriterVar* arg0, RewriterVar* arg1, RewriterVar* arg2);
    void emitReturn(RewriterVar* v);
    void emitSetAttr(RewriterVar* obj, BoxedString* s, RewriterVar* attr);
    void emitSetBlockLocal(InternedString s, RewriterVar* v);
    void emitSetCurrentInst(AST_stmt* node);
    void emitSetExcInfo(RewriterVar* type, RewriterVar* value, RewriterVar* traceback);
    void emitSetGlobal(Box* global, BoxedString* s, RewriterVar* v);
    void emitSetItemName(BoxedString* s, RewriterVar* v);
    void emitSetItem(RewriterVar* target, RewriterVar* slice, RewriterVar* value);
    void emitSetLocal(InternedString s, bool set_closure, RewriterVar* v);
    void emitSideExit(RewriterVar* v, Box* cmp_value, CFGBlock* next_block);
    void emitUncacheExcInfo();

    void abortCompilation();
    int finishCompilation();

    bool finishAssembly(int continue_offset) override;

private:
    RewriterVar* allocArgs(const llvm::ArrayRef<RewriterVar*> args);
#ifndef NDEBUG
    std::pair<uint64_t, uint64_t> asUInt(InternedString s);
#else
    uint64_t asUInt(InternedString s);
#endif
    RewriterVar* getInterp();

    static Box* augbinopICHelper(AugBinopIC* ic, Box* lhs, Box* rhs, int op);
    static Box* binopICHelper(BinopIC* ic, Box* lhs, Box* rhs, int op);
    static Box* callattrHelper(Box* obj, BoxedString* attr, CallattrFlags flags, Box** args,
                               std::vector<BoxedString*>* keyword_names);
    static Box* compareICHelper(CompareIC* ic, Box* lhs, Box* rhs, int op);
    static Box* createDictHelper(uint64_t num, Box** keys, Box** values);
    static Box* createListHelper(uint64_t num, Box** data);
    static Box* createSetHelper(uint64_t num, Box** data);
    static Box* createTupleHelper(uint64_t num, Box** data);
    static Box* exceptionMatchesHelper(Box* obj, Box* cls);
    static Box* getAttrICHelper(GetAttrIC* ic, Box* o, BoxedString* attr);
    static Box* getGlobalICHelper(GetGlobalIC* ic, Box* o, BoxedString* s);
    static Box* getitemICHelper(GetItemIC* ic, Box* o, Box* attr);
    static Box* hasnextHelper(Box* b);
    static Box* nonzeroHelper(Box* b);
    static Box* notHelper(Box* b);
    static Box* runtimeCallHelper(Box* obj, ArgPassSpec argspec, Box** args, std::vector<BoxedString*>* keyword_names);
    static Box* setAttrICHelper(SetAttrIC* ic, Box* o, BoxedString* attr, Box* value);
    static Box* setGlobalICHelper(SetGlobalIC* ic, Box* o, BoxedString* s, Box* v);
    static Box* setitemICHelper(SetItemIC* ic, Box* o, Box* attr, Box* value);
    static Box* unaryopICHelper(UnaryopIC* ic, Box* obj, int op);

#if ENABLE_BASELINEJIT_ICS
    static Box* callattrHelperIC(Box* obj, BoxedString* attr, CallattrFlags flags, CallattrIC* ic, Box** args);
    static Box* runtimeCallHelperIC(Box* obj, ArgPassSpec argspec, RuntimeCallIC* ic, Box** args);
#endif

    void _emitJump(CFGBlock* b, RewriterVar* block_next, int& size_of_indirect_jump);
    void _emitOSRPoint(RewriterVar* result, RewriterVar* node_var);
    void _emitReturn(RewriterVar* v);
    void _emitSideExit(RewriterVar* var, RewriterVar* val_constant, CFGBlock* next_block, RewriterVar* false_path);
};
}

#endif
